/* tslint:disable */
/**
 * This file was automatically generated by hyperschema-to-ts: DO NOT MODIFY IT BY HAND.
 */

/**
 * JSON web token for the session
 *
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `definition` "id".
 */
export type SessionIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `definition` "type".
 */
export type SessionType = 'session';
/**
 * JSON API type field
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "type".
 */
export type AccountType = 'account';
/**
 * ID of account
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "id".
 */
export type AccountIdentity = string;
/**
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `create.schema` link.
 */
export type SessionCreateSchema =
  | {
      /**
       * JSON API type field
       */
      type?: 'email_credentials';
      /**
       * Email
       */
      email: string;
      /**
       * Password
       */
      password: string;
      /**
       * Two-factor authentication one-time password
       */
      otp_code?: string;
    }
  | {
      /**
       * JSON API type field
       */
      type?: 'password_reset';
      /**
       * Reset token
       */
      token: string;
      /**
       * Account ID
       */
      account_id: string;
      /**
       * Password
       */
      password: string;
      /**
       * Two-factor authentication one-time password
       */
      otp_code?: string;
    };
/**
 * JSON API type field
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "type".
 */
export type PerOwnerPricingSubscriptionType = 'per_owner_pricing_subscription';
/**
 * ID of subscription
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "id".
 */
export type PerOwnerPricingSubscriptionIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `definition` "type".
 */
export type PerOwnerPricingBillingProfileType =
  'per_owner_pricing_billing_profile';
/**
 * ID of billing_profile
 *
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `definition` "id".
 */
export type PerOwnerPricingBillingProfileIdentity = string;
/**
 * ID of job
 *
 * This interface was referenced by `Job`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Job`'s JSON-Schema
 * via the `definition` "id".
 */
export type JobIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Job`'s JSON-Schema
 * via the `definition` "type".
 */
export type JobType = 'job';
/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `self.hrefSchema` link.
 */
export type AccountSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * JSON API type field
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "type".
 */
export type OrganizationType = 'organization';
/**
 * ID of organization
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "id".
 */
export type OrganizationIdentity = string;
/**
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type OrganizationInstancesTargetSchema = Organization[];
/**
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `instances.hrefSchema` link.
 */
export type OrganizationInstancesHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `self.hrefSchema` link.
 */
export type OrganizationSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * ID of site
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "id".
 */
export type SiteIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "type".
 */
export type SiteType = 'site';
/**
 * JSON API type field
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "type".
 */
export type SiteSubscriptionType = 'site_subscription';
/**
 * ID of subscription
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "id".
 */
export type SiteSubscriptionIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `definition` "type".
 */
export type SitePlanType = 'site_plan';
/**
 * ID of plan
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `definition` "id".
 */
export type SitePlanIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "type".
 */
export type SiteTransferType = 'site_transfer';
/**
 * ID of site_transfer
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "id".
 */
export type SiteTransferIdentity = string;
/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `self.hrefSchema` link.
 */
export type SiteSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type SiteInstancesTargetSchema = Site[];
/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `instances.hrefSchema` link.
 */
export type SiteInstancesHrefSchema = {
  /**
   * Sorts projects (default sorting is by ascending name)
   */
  sort?:
    | 'name'
    | '-name'
    | 'last_data_change_at'
    | '-last_data_change_at'
    | 'plan'
    | '-plan';
  filters?: {
    /**
     * Filter by project name
     */
    match?: string;
    [k: string]: unknown;
  };
  /**
   * Attributes to manage results pagination
   */
  page?: {
    /**
     * Index of first element to fetch (defaults to 0)
     */
    offset?: number;
    /**
     * Number of elements to fetch (defaults to 20, maximum is 50)
     */
    limit?: number;
    [k: string]: unknown;
  };
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `create.targetSchema` link.
 */
export type SiteCreateTargetSchema = Site | Job;
/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `destroy.targetSchema` link.
 */
export type SiteDestroyTargetSchema = Site | Job;
/**
 * JSON API type field
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "type".
 */
export type PerSitePricingBillingProfileType =
  'per_site_pricing_billing_profile';
/**
 * ID of billing_profile
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "id".
 */
export type PerSitePricingBillingProfileIdentity = string;
/**
 * ID of next_invoice_estimate
 *
 * This interface was referenced by `NextInvoiceEstimate`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `NextInvoiceEstimate`'s JSON-Schema
 * via the `definition` "id".
 */
export type NextInvoiceEstimateIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `NextInvoiceEstimate`'s JSON-Schema
 * via the `definition` "type".
 */
export type NextInvoiceEstimateType = 'next_invoice_estimate';
/**
 * JSON API type field
 *
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `definition` "type".
 */
export type PerOwnerPricingPlanType = 'per_owner_pricing_plan';
/**
 * ID of plan
 *
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `definition` "id".
 */
export type PerOwnerPricingPlanIdentity = string;
/**
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `simulate.targetSchema` link.
 */
export type PerOwnerPricingSubscriptionSimulateTargetSchema = (
  | NextInvoiceEstimate
  | PerOwnerPricingSubscription
)[];
/**
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type SitePlanInstancesTargetSchema = SitePlan[];
/**
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type PerOwnerPricingPlanInstancesTargetSchema = PerOwnerPricingPlan[];
/**
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type PerSitePricingBillingProfileInstancesTargetSchema =
  PerSitePricingBillingProfile[];
/**
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `self.hrefSchema` link.
 */
export type PerSitePricingBillingProfileSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `item_types`, `item_types.fields`, `item_types.fieldsets`, `item_types.singleton_item`, `account`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * ID of billing_profile
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "id".
 */
export type InvoiceIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "type".
 */
export type InvoiceType = 'invoice';
/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_owner_pricing_billing_profile_instances.targetSchema` link.
 */
export type InvoicePerOwnerPricingBillingProfileInstancesTargetSchema =
  Invoice[];
/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_site_pricing_billing_profile_instances.targetSchema` link.
 */
export type InvoicePerSitePricingBillingProfileInstancesTargetSchema =
  Invoice[];
/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_owner_pricing_billing_profile_collect_unpaid.targetSchema` link.
 */
export type InvoicePerOwnerPricingBillingProfileCollectUnpaidTargetSchema =
  Invoice[];
/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_site_pricing_billing_profile_collect_unpaid.targetSchema` link.
 */
export type InvoicePerSitePricingBillingProfileCollectUnpaidTargetSchema =
  Invoice[];
/**
 * ID of billing_profile
 *
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `definition` "id".
 */
export type ResourceUsageIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `definition` "type".
 */
export type ResourceUsageType = 'resource_usage';
/**
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type ResourceUsageInstancesTargetSchema = ResourceUsage[];
/**
 * ID of job result
 *
 * This interface was referenced by `JobResult`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `JobResult`'s JSON-Schema
 * via the `definition` "id".
 */
export type JobResultIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `JobResult`'s JSON-Schema
 * via the `definition` "type".
 */
export type JobResultType = 'job_result';
/**
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type SiteTransferInstancesTargetSchema = SiteTransfer[];
/**
 * ID of site invitation
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `definition` "id".
 */
export type SiteInvitationIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `definition` "type".
 */
export type SiteInvitationType = 'site_invitation';
/**
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `redeem.hrefSchema` link.
 */
export type SiteInvitationRedeemHrefSchema = {
  /**
   * The site invitation authorization token
   */
  token?: string;
  [k: string]: unknown;
};
/**
 * ID of limit
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `definition` "id".
 */
export type SubscriptionLimitIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `definition` "type".
 */
export type SubscriptionLimitType = 'subscription_limit';
/**
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type SubscriptionLimitInstancesTargetSchema = SubscriptionLimit[];
/**
 * ID of feature
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `definition` "id".
 */
export type SubscriptionFeatureIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `definition` "type".
 */
export type SubscriptionFeatureType = 'subscription_feature';
/**
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type SubscriptionFeatureInstancesTargetSchema = SubscriptionFeature[];
/**
 * ID of access_token
 *
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `definition` "id".
 */
export type OauthApplicationIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `definition` "type".
 */
export type OauthApplicationType = 'oauth_application';
/**
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type OauthApplicationInstancesTargetSchema = OauthApplication[];
/**
 * ID of access_token
 *
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `definition` "id".
 */
export type PaymentIntentIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `definition` "type".
 */
export type PaymentIntentType = 'payment_intent';
/**
 * ID of payment_method
 *
 * This interface was referenced by `PaymentMethod`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `PaymentMethod`'s JSON-Schema
 * via the `definition` "id".
 */
export type PaymentMethodIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `PaymentMethod`'s JSON-Schema
 * via the `definition` "type".
 */
export type PaymentMethodType = 'payment_method';
/**
 * ID of otp_backup_codes
 *
 * This interface was referenced by `OtpBackupCodes`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `OtpBackupCodes`'s JSON-Schema
 * via the `definition` "id".
 */
export type OtpBackupCodesIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `OtpBackupCodes`'s JSON-Schema
 * via the `definition` "type".
 */
export type OtpBackupCodesType = 'otp_backup_codes';
/**
 * ID of role
 *
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `definition` "id".
 */
export type OrganizationRoleIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `definition` "type".
 */
export type OrganizationRoleType = 'organization_role';
/**
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type OrganizationRoleInstancesTargetSchema = OrganizationRole[];
/**
 * ID of invitation
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "id".
 */
export type OrganizationInvitationIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "type".
 */
export type OrganizationInvitationType = 'organization_invitation';
/**
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type OrganizationInvitationInstancesTargetSchema =
  OrganizationInvitation[];
/**
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `redeem.hrefSchema` link.
 */
export type OrganizationInvitationRedeemHrefSchema = {
  /**
   * The organization invitation authorization token
   */
  token?: string;
  [k: string]: unknown;
};
/**
 * ID of membership
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "identity".
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "id".
 */
export type OrganizationMembershipIdentity = string;
/**
 * JSON API type field
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "type".
 */
export type OrganizationMembershipType = 'organization_membership';
/**
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `instances.targetSchema` link.
 */
export type OrganizationMembershipInstancesTargetSchema =
  OrganizationMembership[];
/**
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `instances.hrefSchema` link.
 */
export type OrganizationMembershipInstancesHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `role`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `self.hrefSchema` link.
 */
export type OrganizationMembershipSelfHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `role`.
   */
  include?: string;
  [k: string]: unknown;
};
/**
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `me.hrefSchema` link.
 */
export type OrganizationMembershipMeHrefSchema = {
  /**
   * Comma-separated list of [relationship paths](https://jsonapi.org/format/#fetching-includes). A relationship path is a dot-separated list of relationship names. Allowed relationship paths: `role`.
   */
  include?: string;
  [k: string]: unknown;
};

export type DatoApi = {
  session?: Session;
  account?: Account;
  site?: Site;
  site_subscription?: SiteSubscription;
  per_owner_pricing_subscription?: PerOwnerPricingSubscription;
  site_plan?: SitePlan;
  per_owner_pricing_plan?: PerOwnerPricingPlan;
  per_site_pricing_billing_profile?: PerSitePricingBillingProfile;
  per_owner_pricing_billing_profile?: PerOwnerPricingBillingProfile;
  invoice?: Invoice;
  resource_usage?: ResourceUsage;
  job_result?: JobResult;
  site_transfer?: SiteTransfer;
  site_invitation?: SiteInvitation;
  subscription_limit?: SubscriptionLimit;
  subscription_feature?: SubscriptionFeature;
  job?: Job;
  oauth_application?: OauthApplication;
  payment_intent?: PaymentIntent;
  payment_method?: PaymentMethod;
  next_invoice_estimate?: NextInvoiceEstimate;
  otp_backup_codes?: OtpBackupCodes;
  organization?: Organization;
  organization_role?: OrganizationRole;
  organization_invitation?: OrganizationInvitation;
  organization_membership?: OrganizationMembership;
  [k: string]: unknown;
};

/**
 * A session is required to access to read-and-write API endpoints
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `create.targetSchema` link.
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `update.targetSchema` link.
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `activate_2fa.targetSchema` link.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "session".
 */
export type Session = {
  id: SessionIdentity;
  type: SessionType;
  account: AccountData;
};
export type SessionCreateTargetSchema = Session;
export type AccountCreateTargetSchema = Session;
export type AccountUpdateTargetSchema = Session;
export type AccountActivate_2FaTargetSchema = Session;
/**
 * JSON API data
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "data".
 */
export type AccountData = {
  type: AccountType;
  id: AccountIdentity;
};

/**
 * JSON API data
 *
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `definition` "data".
 */
export type SessionData = {
  type: SessionType;
  id: SessionIdentity;
};

/**
 * JSON API links
 *
 * This interface was referenced by `Session`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type SessionRelationships = {
  account: AccountData;
};

/**
 * DatoCMS account
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "account".
 */
export type Account = {
  id: AccountIdentity;
  type: AccountType;
  /**
   * Email
   */
  email: string;
  /**
   * First name
   */
  first_name: string | null;
  /**
   * Last name
   */
  last_name: string | null;
  /**
   * Company name
   */
  company: string | null;
  /**
   * API token
   */
  api_token?: string;
  /**
   * Whether 2-factor authentication is active for this account or not
   */
  is_2fa_active: boolean;
  active_subscription: null | PerOwnerPricingSubscriptionData;
  billing_profile: null | PerOwnerPricingBillingProfileData;
};
export type AccountDestroyJobSchema = Account;
export type AccountSelfTargetSchema = Account;
export type AccountDeactivate_2FaTargetSchema = Account;
/**
 * JSON API data
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "data".
 */
export type PerOwnerPricingSubscriptionData = {
  type: PerOwnerPricingSubscriptionType;
  id: PerOwnerPricingSubscriptionIdentity;
};

/**
 * JSON API data
 *
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `definition` "data".
 */
export type PerOwnerPricingBillingProfileData = {
  type: PerOwnerPricingBillingProfileType;
  id: PerOwnerPricingBillingProfileIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type AccountAttributes = {
  /**
   * Email
   */
  email: string;
  /**
   * First name
   */
  first_name: string | null;
  /**
   * Last name
   */
  last_name: string | null;
  /**
   * Company name
   */
  company: string | null;
  /**
   * API token
   */
  api_token?: string;
  /**
   * Whether 2-factor authentication is active for this account or not
   */
  is_2fa_active: boolean;
};

/**
 * JSON API links
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type AccountRelationships = {
  active_subscription: null | PerOwnerPricingSubscriptionData;
  billing_profile: null | PerOwnerPricingBillingProfileData;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `create.schema` link.
 */
export type AccountCreateSchema = {
  type?: AccountType;
  /**
   * Email
   */
  email: string;
  /**
   * First name
   */
  first_name?: string | null;
  /**
   * Last name
   */
  last_name?: string | null;
  /**
   * Company name
   */
  company?: string | null;
  /**
   * Password
   */
  password: string;
  acquisition_method?: {
    source: string;
    medium: string;
    campaign?: string;
  };
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `update.schema` link.
 */
export type AccountUpdateSchema = {
  id?: AccountIdentity;
  type?: AccountType;
  /**
   * Email
   */
  email?: string;
  /**
   * First name
   */
  first_name?: string | null;
  /**
   * Last name
   */
  last_name?: string | null;
  /**
   * Company name
   */
  company?: string | null;
  /**
   * New password
   */
  password?: string;
  /**
   * Current password (required if new_password or email is set)
   */
  current_password?: string;
  /**
   * Two-factor authentication one-time password (required if new_password or email is set)
   */
  otp_code?: string;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `destroy.schema` link.
 */
export type AccountDestroySchema = {
  /**
   * JSON API type field
   */
  type?: 'account_destroy_request';
  /**
   * OTP code
   */
  otp_code: string;
  /**
   * Current password
   */
  password: string;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `destroy.targetSchema` link.
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `convert_to_organization.targetSchema` link.
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `destroy.targetSchema` link.
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `duplicate.targetSchema` link.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "job".
 */
export type Job = {
  id: JobIdentity;
  type: JobType;
};
export type AccountDestroyTargetSchema = Job;
export type AccountConvertToOrganizationTargetSchema = Job;
export type OrganizationDestroyTargetSchema = Job;
export type SiteDuplicateTargetSchema = Job;
/**
 * JSON API data
 *
 * This interface was referenced by `Job`'s JSON-Schema
 * via the `definition` "data".
 */
export type JobData = {
  type: JobType;
  id: JobIdentity;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `reset_password.schema` link.
 */
export type AccountResetPasswordSchema = {
  type?: AccountType;
  /**
   * Email
   */
  email: string;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `activate_2fa.schema` link.
 */
export type AccountActivate_2FaSchema = {
  /**
   * JSON API type field
   */
  type?: string;
  /**
   * OTP code
   */
  otp_code: string;
  /**
   * Current password
   */
  password: string;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `reset_2fa.targetSchema` link.
 */
export type AccountReset_2FaTargetSchema = {
  /**
   * ID of account
   */
  id: string;
  /**
   * JSON API type field
   */
  type: string;
  attributes: {
    /**
     * 2-factor authentication provisioning URI
     */
    provisioning_2fa_uri: string;
  };
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `deactivate_2fa.schema` link.
 */
export type AccountDeactivate_2FaSchema = {
  /**
   * JSON API type field
   */
  type?: string;
  /**
   * OTP code
   */
  otp_code: string;
  /**
   * Current password
   */
  password: string;
};

/**
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `convert_to_organization.schema` link.
 */
export type AccountConvertToOrganizationSchema = {
  type?: OrganizationType;
  /**
   * Name of the organization
   */
  name: string;
};

/**
 * Organizations allow you to collaborate with members on projects
 *
 * This interface was referenced by `Account`'s JSON-Schema
 * via the `convert_to_organization.jobSchema` link.
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `redeem.targetSchema` link.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "organization".
 */
export type Organization = {
  id: OrganizationIdentity;
  type: OrganizationType;
  /**
   * Name of the organization
   */
  name: string;
  active_subscription: PerOwnerPricingSubscriptionData;
  billing_profile: null | PerOwnerPricingBillingProfileData;
};
export type OrganizationSelfTargetSchema = Organization;
export type OrganizationCreateTargetSchema = Organization;
export type OrganizationUpdateTargetSchema = Organization;
export type OrganizationDestroyJobSchema = Organization;
export type AccountConvertToOrganizationJobSchema = Organization;
export type OrganizationInvitationRedeemTargetSchema = Organization;
/**
 * JSON API data
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "data".
 */
export type OrganizationData = {
  type: OrganizationType;
  id: OrganizationIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type OrganizationAttributes = {
  /**
   * Name of the organization
   */
  name: string;
};

/**
 * JSON API links
 *
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type OrganizationRelationships = {
  active_subscription: PerOwnerPricingSubscriptionData;
  billing_profile: null | PerOwnerPricingBillingProfileData;
};

/**
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `create.schema` link.
 */
export type OrganizationCreateSchema = {
  type?: OrganizationType;
  /**
   * Name of the organization
   */
  name?: string;
};

/**
 * This interface was referenced by `Organization`'s JSON-Schema
 * via the `update.schema` link.
 */
export type OrganizationUpdateSchema = {
  id?: OrganizationIdentity;
  type?: OrganizationType;
  /**
   * Name of the organization
   */
  name?: string;
};

/**
 * A project represents a specific DatoCMS administrative area
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `create.targetSchema` link.
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `destroy.targetSchema` link.
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `accept.targetSchema` link.
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `redeem.targetSchema` link.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "site".
 */
export type Site = {
  id: SiteIdentity;
  type: SiteType;
  /**
   * Site name
   */
  name: string;
  /**
   * Site domain
   */
  domain: string | null;
  /**
   * Internal project domain
   */
  internal_domain: string;
  /**
   * Internal project subdomain
   */
  internal_subdomain?: string;
  /**
   * Specifies the last time when a change of data occurred
   */
  last_data_change_at: null | string;
  /**
   * Date of project creation
   */
  created_at: null | string;
  /**
   * Access token
   */
  access_token: null | string;
  /**
   * Read-write API token
   */
  readwrite_token?: null | string;
  /**
   * Read-only API token
   */
  readonly_token?: null | string;
  /**
   * Status of project according to billing situation
   */
  deactivated: boolean;
  /**
   * Whether the project can be used as a public template
   */
  is_public_template?: boolean;
  /**
   * Status of the project
   */
  status?: 'creating' | 'ready' | 'destroying';
  active_subscription: null | SiteSubscriptionData;
  active_plan: null | SitePlanData;
  transfer: SiteTransferData | null;
  meta: SiteMeta;
};
export type SiteSelfTargetSchema = Site;
export type SiteCreateJobSchema = Site;
export type SiteUpdateTargetSchema = Site;
export type SiteDestroyJobSchema = Site;
export type SiteDuplicateJobSchema = Site;
export type SiteTransferCreateTargetSchema = Site;
export type SiteTransferDestroyTargetSchema = Site;
export type SiteTransferAcceptTargetSchema = Site;
export type SiteInvitationRedeemTargetSchema = Site;
/**
 * JSON API data
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "data".
 */
export type SiteSubscriptionData = {
  type: SiteSubscriptionType;
  id: SiteSubscriptionIdentity;
};

/**
 * JSON API data
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `definition` "data".
 */
export type SitePlanData = {
  type: SitePlanType;
  id: SitePlanIdentity;
};

/**
 * JSON API data
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "data".
 */
export type SiteTransferData = {
  type: SiteTransferType;
  id: SiteTransferIdentity;
};

/**
 * Meta attributes
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "meta".
 */
export type SiteMeta = {
  /**
   * Specifies the last time when a change of data occurred
   */
  last_data_change_at: null | string;
  /**
   * The creation date of the site
   */
  created_at: null | string;
  /**
   * True when the site has been deactivated
   */
  deactivated: null | boolean;
  /**
   * Site status
   */
  status: string;
  owner:
    | {
        /**
         * Type of owner
         */
        type: 'account';
        /**
         * Email of the account that owns the project
         */
        email: string;
      }
    | {
        /**
         * Type of owner
         */
        type: 'organization';
        /**
         * Name of the organization that owns the project
         */
        name: string;
        /**
         * ID of the organization that owns the project
         */
        id: string;
      };
};

/**
 * JSON API data
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "data".
 */
export type SiteData = {
  type: SiteType;
  id: SiteIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SiteAttributes = {
  /**
   * Site name
   */
  name: string;
  /**
   * Site domain
   */
  domain: string | null;
  /**
   * Internal project domain
   */
  internal_domain: string;
  /**
   * Internal project subdomain
   */
  internal_subdomain?: string;
  /**
   * Specifies the last time when a change of data occurred
   */
  last_data_change_at: null | string;
  /**
   * Date of project creation
   */
  created_at: null | string;
  /**
   * Access token
   */
  access_token: null | string;
  /**
   * Read-write API token
   */
  readwrite_token?: null | string;
  /**
   * Read-only API token
   */
  readonly_token?: null | string;
  /**
   * Status of project according to billing situation
   */
  deactivated: boolean;
  /**
   * Whether the project can be used as a public template
   */
  is_public_template?: boolean;
  /**
   * Status of the project
   */
  status?: 'creating' | 'ready' | 'destroying';
};

/**
 * JSON API links
 *
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type SiteRelationships = {
  active_subscription: null | SiteSubscriptionData;
  active_plan: null | SitePlanData;
  transfer: SiteTransferData | null;
};

/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `create.schema` link.
 */
export type SiteCreateSchema = {
  type?: SiteType;
  /**
   * Site name
   */
  name: string;
  /**
   * Internal project subdomain
   */
  internal_subdomain?: string;
  /**
   * Site template
   */
  template?: string | null;
};

/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `update.schema` link.
 */
export type SiteUpdateSchema = {
  id?: SiteIdentity;
  type?: SiteType;
  /**
   * Site name
   */
  name?: string;
  /**
   * Site domain
   */
  domain?: string | null;
  /**
   * Internal project subdomain
   */
  internal_subdomain?: string;
  /**
   * Whether the project can be used as a public template
   */
  is_public_template?: boolean;
};

/**
 * This interface was referenced by `Site`'s JSON-Schema
 * via the `duplicate.schema` link.
 */
export type SiteDuplicateSchema = {
  type?: SiteType;
  /**
   * Site name
   */
  name: string;
  /**
   * When duplicating a site it allows to duplicate only the schema
   */
  ignore_content?: boolean;
  payment_intent_id?: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence?: 'yearly' | 'monthly';
  /**
   * Extra packets
   */
  extra_packets?: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
  billing_profile?: PerSitePricingBillingProfileData | null;
  plan?: SitePlanData;
};

/**
 * JSON API data
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "data".
 */
export type PerSitePricingBillingProfileData = {
  type: PerSitePricingBillingProfileType;
  id: PerSitePricingBillingProfileIdentity;
};

/**
 * A per-project subscription record
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "site_subscription".
 */
export type SiteSubscription = {
  id: SiteSubscriptionIdentity;
  type: SiteSubscriptionType;
  /**
   * Date of creation of subscription
   */
  created_at: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  price: number;
  /**
   * Extra packets
   */
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
  plan: SitePlanData;
  billing_profile?: PerSitePricingBillingProfileData | null;
  site?: SiteData;
};
export type SiteSubscriptionCreateTargetSchema = SiteSubscription;
export type SiteSubscriptionValidateTargetSchema = SiteSubscription;
/**
 * JSON API attributes
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SiteSubscriptionAttributes = {
  /**
   * Date of creation of subscription
   */
  created_at: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  price: number;
  /**
   * Extra packets
   */
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
};

/**
 * JSON API links
 *
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type SiteSubscriptionRelationships = {
  plan: SitePlanData;
  billing_profile?: PerSitePricingBillingProfileData | null;
  site?: SiteData;
};

/**
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `create.schema` link.
 */
export type SiteSubscriptionCreateSchema = {
  type?: SiteSubscriptionType;
  payment_intent_id?: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  /**
   * Extra packets
   */
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
  billing_profile?: PerSitePricingBillingProfileData | null;
  plan: SitePlanData;
};

/**
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `simulate.schema` link.
 */
export type SiteSubscriptionSimulateSchema = {
  type?: SiteSubscriptionType;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  /**
   * Extra packets
   */
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
  is_duplicate?: boolean;
  ignore_content?: boolean;
  billing_profile?: PerSitePricingBillingProfileData | null;
  plan: SitePlanData;
};

/**
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `simulate.targetSchema` link.
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `simulate_accept.targetSchema` link.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "next_invoice_estimate".
 */
export type NextInvoiceEstimate = {
  id: NextInvoiceEstimateIdentity;
  type: NextInvoiceEstimateType;
  amount: number;
  next_billing_at: string;
  discount_percentage?: number;
  tax_label: null | string;
};
export type SiteSubscriptionSimulateTargetSchema = NextInvoiceEstimate;
export type SiteTransferSimulateAcceptTargetSchema = NextInvoiceEstimate;
/**
 * JSON API data
 *
 * This interface was referenced by `NextInvoiceEstimate`'s JSON-Schema
 * via the `definition` "data".
 */
export type NextInvoiceEstimateData = {
  type: NextInvoiceEstimateType;
  id: NextInvoiceEstimateIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `NextInvoiceEstimate`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type NextInvoiceEstimateAttributes = {
  amount: number;
  next_billing_at: string;
  discount_percentage?: number;
  tax_label: null | string;
};

/**
 * This interface was referenced by `SiteSubscription`'s JSON-Schema
 * via the `validate.schema` link.
 */
export type SiteSubscriptionValidateSchema = {
  type?: SiteSubscriptionType;
  /**
   * Extra packets
   */
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  };
  /**
   * Skip compatibility checks on content (number of records and uploads)
   */
  ignore_content?: boolean;
  /**
   * Specify is site is a duplicate of another site
   */
  is_duplicate?: boolean;
  plan: SitePlanData;
};

/**
 * A subscription record
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "per_owner_pricing_subscription".
 */
export type PerOwnerPricingSubscription = {
  id: PerOwnerPricingSubscriptionIdentity;
  type: PerOwnerPricingSubscriptionType;
  /**
   * Date of creation of subscription
   */
  created_at: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  /**
   * Purchased extra-usage packets
   */
  extra_packets: {
    /**
     * Type of packet
     */
    id: string;
    /**
     * Number of purchased packets
     */
    quantity: number;
  }[];
  price: number;
  plan: PerOwnerPricingPlanData;
  meta: PerOwnerPricingSubscriptionMeta;
};
export type PerOwnerPricingSubscriptionCreateTargetSchema =
  PerOwnerPricingSubscription;
export type PerOwnerPricingSubscriptionValidateTargetSchema =
  PerOwnerPricingSubscription;
/**
 * JSON API data
 *
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `definition` "data".
 */
export type PerOwnerPricingPlanData = {
  type: PerOwnerPricingPlanType;
  id: PerOwnerPricingPlanIdentity;
};

/**
 * JSON API meta
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "meta".
 */
export type PerOwnerPricingSubscriptionMeta = {
  /**
   * Whether account can be billed if it has no credit-card information or not
   */
  billable_without_payment_method: boolean;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PerOwnerPricingSubscriptionAttributes = {
  /**
   * Date of creation of subscription
   */
  created_at: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  /**
   * Purchased extra-usage packets
   */
  extra_packets: {
    /**
     * Type of packet
     */
    id: string;
    /**
     * Number of purchased packets
     */
    quantity: number;
  }[];
  price: number;
};

/**
 * JSON API links
 *
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type PerOwnerPricingSubscriptionRelationships = {
  plan: PerOwnerPricingPlanData;
};

/**
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `create.schema` link.
 */
export type PerOwnerPricingSubscriptionCreateSchema = {
  type?: PerOwnerPricingSubscriptionType;
  payment_intent_id?: string;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  billing_profile?: null | {
    address_line: string;
    city: string;
    company?: null | string;
    country: string;
    email: string;
    first_name: string;
    last_name: string;
    state: string;
    vat_number?: null | string;
    cf_cod_fiscale?: null | string;
    po_number?: null | string;
    zip: string;
  };
  plan: PerOwnerPricingPlanData;
};

/**
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `simulate.schema` link.
 */
export type PerOwnerPricingSubscriptionSimulateSchema = {
  type?: PerOwnerPricingSubscriptionType;
  /**
   * Type of recurrence (yearly/monthly)
   */
  recurrence: 'yearly' | 'monthly';
  billing_profile?: null | {
    address_line: string;
    city: string;
    country: string;
    vat_number?: null | string;
    cf_cod_fiscale?: null | string;
    po_number?: null | string;
    zip: string;
    [k: string]: unknown;
  };
  plan: PerOwnerPricingPlanData;
};

/**
 * This interface was referenced by `PerOwnerPricingSubscription`'s JSON-Schema
 * via the `validate.schema` link.
 */
export type PerOwnerPricingSubscriptionValidateSchema = {
  type?: PerOwnerPricingSubscriptionType;
  plan: PerOwnerPricingPlanData;
  [k: string]: unknown;
};

/**
 * Stores the information regarding the current plan for the project.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "site_plan".
 */
export type SitePlan = {
  id: SitePlanIdentity;
  type: SitePlanType;
  /**
   * The name of the plan
   */
  name: string;
  /**
   * Whether this plan is active or legacy
   */
  active: boolean;
  /**
   * Whether custom domain can be enabled or not
   */
  custom_domain: boolean;
  /**
   * Number of users that can be invited
   */
  users: null | number;
  /**
   * Number of indexable pages
   */
  indexable_pages: null | number;
  /**
   * Number of build triggers
   */
  build_triggers: null | number;
  /**
   * Number of plugins
   */
  plugins: null | number;
  /**
   * Number of webhooks
   */
  webhooks: null | number;
  /**
   * Number of records allowed
   */
  items: null | number;
  /**
   * Monthly price
   */
  monthly_price: number;
  /**
   * Yearly price
   */
  yearly_price: number;
  /**
   * Uploadable bytes
   */
  uploadable_bytes: null | number;
  /**
   * Amount of asset data transferred between our Asset CDN and GraphQL Content Delivery API and content consumers
   */
  traffic_bytes: null | number;
  /**
   * The number of requests made to both our Content Management and Content Delivery APIs
   */
  api_calls: null | number;
  /**
   * The number of streaming seconds delivered by Mux.com
   */
  mux_streaming_seconds: null | number;
  /**
   * The number of available encoding seconds to Mux.com
   */
  mux_encoding_seconds: null | number;
  /**
   * The number of different API tokens you can generate, each which different permissions
   */
  access_tokens: null | number;
  /**
   * Number of roles allowed
   */
  roles: null | number;
  /**
   * Number of locales allowed
   */
  locales: null | number;
  /**
   * Number of sandbox environments allowed
   */
  sandbox_environments: null | number;
  /**
   * Number of models allowed
   */
  item_types: null | number;
  /**
   * Whether collaboration features are enabled or not
   */
  item_locking: boolean;
  /**
   * Whether project is in white-label mode or not
   */
  white_label: boolean;
  /**
   * Whether Single Sign-On feature is enabled or not
   */
  sso: boolean;
  /**
   * Whether built-in image editor and smart-tagging is enabled or not
   */
  advanced_media_area: boolean;
  /**
   * Maximum number of blocks a record can contain
   */
  blocks_per_item: number;
  /**
   * Maximum level of block nesting for a record
   */
  blocks_depth: number;
  /**
   * Whether video streaming with Mux.com is enabled or not
   */
  video: boolean;
  /**
   * Days of version history retention
   */
  history_retention_days: number | null;
  /**
   * Maximum number of clients connected at the same time to the Realtime Updates API. The limit is per-project
   */
  concurrent_realtime_connections: number;
  /**
   * Period (in minutes) in which bursts of changes made to the same record by the same user (or API token) will be grouped into a single one
   */
  history_resolution_minutes: number;
  /**
   * Whether two-factor authentication can be enabled or not
   */
  otp: boolean;
  /**
   * Whether workflows are enabled or not
   */
  workflows: boolean;
  /**
   * Number of workflows allowed
   */
  workflows_count: number;
  /**
   * Whether audit logs are enabled or not
   */
  audit_log: boolean;
  /**
   * Whether translator roles are enabled or not
   */
  translator_roles: boolean;
  /**
   * Whether or not use a static IP when sending webhooks
   */
  static_webhooks_ip: boolean;
  /**
   * Maximum size in bytes for a single file upload
   */
  maximum_single_upload_bytes: number;
  /**
   * Available extra packets
   */
  extra_packets: {
    users?: {
      amount_per_packet: number;
      price: number;
    };
    locales?: {
      amount_per_packet: number;
      price: number;
    };
    item_types?: {
      amount_per_packet: number;
      price: number;
    };
    roles?: {
      amount_per_packet: number;
      price: number;
    };
    build_triggers?: {
      amount_per_packet: number;
      price: number;
    };
    access_tokens?: {
      amount_per_packet: number;
      price: number;
    };
    mux_encoding_seconds?: {
      amount_per_packet: number;
      price: number;
    };
    sandbox_environments?: {
      amount_per_packet: number;
      price: number;
    };
  };
  /**
   * Automatic packets
   */
  auto_packets: {
    traffic_bytes?: {
      amount_per_packet: number;
      price: number;
    };
    api_calls?: {
      amount_per_packet: number;
      price: number;
    };
    mux_streaming_seconds?: {
      amount_per_packet: number;
      price: number;
    };
  };
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `SitePlan`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SitePlanAttributes = {
  /**
   * The name of the plan
   */
  name: string;
  /**
   * Whether this plan is active or legacy
   */
  active: boolean;
  /**
   * Whether custom domain can be enabled or not
   */
  custom_domain: boolean;
  /**
   * Number of users that can be invited
   */
  users: null | number;
  /**
   * Number of indexable pages
   */
  indexable_pages: null | number;
  /**
   * Number of build triggers
   */
  build_triggers: null | number;
  /**
   * Number of plugins
   */
  plugins: null | number;
  /**
   * Number of webhooks
   */
  webhooks: null | number;
  /**
   * Number of records allowed
   */
  items: null | number;
  /**
   * Monthly price
   */
  monthly_price: number;
  /**
   * Yearly price
   */
  yearly_price: number;
  /**
   * Uploadable bytes
   */
  uploadable_bytes: null | number;
  /**
   * Amount of asset data transferred between our Asset CDN and GraphQL Content Delivery API and content consumers
   */
  traffic_bytes: null | number;
  /**
   * The number of requests made to both our Content Management and Content Delivery APIs
   */
  api_calls: null | number;
  /**
   * The number of streaming seconds delivered by Mux.com
   */
  mux_streaming_seconds: null | number;
  /**
   * The number of available encoding seconds to Mux.com
   */
  mux_encoding_seconds: null | number;
  /**
   * The number of different API tokens you can generate, each which different permissions
   */
  access_tokens: null | number;
  /**
   * Number of roles allowed
   */
  roles: null | number;
  /**
   * Number of locales allowed
   */
  locales: null | number;
  /**
   * Number of sandbox environments allowed
   */
  sandbox_environments: null | number;
  /**
   * Number of models allowed
   */
  item_types: null | number;
  /**
   * Whether collaboration features are enabled or not
   */
  item_locking: boolean;
  /**
   * Whether project is in white-label mode or not
   */
  white_label: boolean;
  /**
   * Whether Single Sign-On feature is enabled or not
   */
  sso: boolean;
  /**
   * Whether built-in image editor and smart-tagging is enabled or not
   */
  advanced_media_area: boolean;
  /**
   * Maximum number of blocks a record can contain
   */
  blocks_per_item: number;
  /**
   * Maximum level of block nesting for a record
   */
  blocks_depth: number;
  /**
   * Whether video streaming with Mux.com is enabled or not
   */
  video: boolean;
  /**
   * Days of version history retention
   */
  history_retention_days: number | null;
  /**
   * Maximum number of clients connected at the same time to the Realtime Updates API. The limit is per-project
   */
  concurrent_realtime_connections: number;
  /**
   * Period (in minutes) in which bursts of changes made to the same record by the same user (or API token) will be grouped into a single one
   */
  history_resolution_minutes: number;
  /**
   * Whether two-factor authentication can be enabled or not
   */
  otp: boolean;
  /**
   * Whether workflows are enabled or not
   */
  workflows: boolean;
  /**
   * Number of workflows allowed
   */
  workflows_count: number;
  /**
   * Whether audit logs are enabled or not
   */
  audit_log: boolean;
  /**
   * Whether translator roles are enabled or not
   */
  translator_roles: boolean;
  /**
   * Whether or not use a static IP when sending webhooks
   */
  static_webhooks_ip: boolean;
  /**
   * Maximum size in bytes for a single file upload
   */
  maximum_single_upload_bytes: number;
  /**
   * Available extra packets
   */
  extra_packets: {
    users?: {
      amount_per_packet: number;
      price: number;
    };
    locales?: {
      amount_per_packet: number;
      price: number;
    };
    item_types?: {
      amount_per_packet: number;
      price: number;
    };
    roles?: {
      amount_per_packet: number;
      price: number;
    };
    build_triggers?: {
      amount_per_packet: number;
      price: number;
    };
    access_tokens?: {
      amount_per_packet: number;
      price: number;
    };
    mux_encoding_seconds?: {
      amount_per_packet: number;
      price: number;
    };
    sandbox_environments?: {
      amount_per_packet: number;
      price: number;
    };
  };
  /**
   * Automatic packets
   */
  auto_packets: {
    traffic_bytes?: {
      amount_per_packet: number;
      price: number;
    };
    api_calls?: {
      amount_per_packet: number;
      price: number;
    };
    mux_streaming_seconds?: {
      amount_per_packet: number;
      price: number;
    };
  };
};

/**
 * Stores the information regarding the current plan for the account.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "per_owner_pricing_plan".
 */
export type PerOwnerPricingPlan = {
  id: PerOwnerPricingPlanIdentity;
  type: PerOwnerPricingPlanType;
  /**
   * The name of the plan
   */
  name: string;
  /**
   * Additional notes
   */
  notes: null | string;
  /**
   * Additional enterprise features enabled
   */
  enterprise_features: string[];
  /**
   * Representative color of the plan
   */
  color_hex: null | string;
  /**
   * Description of the plan
   */
  description: null | string;
  /**
   * Whether this plan is active or legacy
   */
  active: boolean;
  /**
   * Monthly price for plan (EUR)
   */
  monthly_price: number;
  /**
   * Yearly price for plan (EUR)
   */
  yearly_price: number;
  limits: (
    | {
        id: string;
        type: 'activable_feature';
        available: boolean;
      }
    | {
        id: string;
        type: 'boolean_system_limit';
        available: boolean;
      }
    | {
        id: string;
        type: 'countable_system_limit';
        limit: number;
      }
    | {
        id: string;
        type: 'possibly_incompatible_countable_system_limit';
        limit: number;
      }
    | {
        id: string;
        type: 'account_managed_resource';
        free_of_charge_usage: number;
        extra_packets_available_in_some_plan: boolean;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
      }
    | {
        id: string;
        type: 'per_site_quota_managed_site_resource';
        free_of_charge_per_site_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'per_environment_quota_managed_site_resource';
        free_of_charge_per_environment_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'shared_quota_managed_site_resource';
        free_of_charge_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'shared_quota_metered_site_resource';
        free_of_charge_usage: number;
        extra_packets_available_in_some_plan?: boolean;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
      }
  )[];
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `PerOwnerPricingPlan`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PerOwnerPricingPlanAttributes = {
  /**
   * The name of the plan
   */
  name: string;
  /**
   * Additional notes
   */
  notes: null | string;
  /**
   * Additional enterprise features enabled
   */
  enterprise_features: string[];
  /**
   * Representative color of the plan
   */
  color_hex: null | string;
  /**
   * Description of the plan
   */
  description: null | string;
  /**
   * Whether this plan is active or legacy
   */
  active: boolean;
  /**
   * Monthly price for plan (EUR)
   */
  monthly_price: number;
  /**
   * Yearly price for plan (EUR)
   */
  yearly_price: number;
  limits: (
    | {
        id: string;
        type: 'activable_feature';
        available: boolean;
      }
    | {
        id: string;
        type: 'boolean_system_limit';
        available: boolean;
      }
    | {
        id: string;
        type: 'countable_system_limit';
        limit: number;
      }
    | {
        id: string;
        type: 'possibly_incompatible_countable_system_limit';
        limit: number;
      }
    | {
        id: string;
        type: 'account_managed_resource';
        free_of_charge_usage: number;
        extra_packets_available_in_some_plan: boolean;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
      }
    | {
        id: string;
        type: 'per_site_quota_managed_site_resource';
        free_of_charge_per_site_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'per_environment_quota_managed_site_resource';
        free_of_charge_per_environment_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'shared_quota_managed_site_resource';
        free_of_charge_usage: number;
        max_extra_packets: null | number;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
        extra_packets_available_in_some_plan: boolean;
      }
    | {
        id: string;
        type: 'shared_quota_metered_site_resource';
        free_of_charge_usage: number;
        extra_packets_available_in_some_plan?: boolean;
        extra_packet_amount: null | number;
        extra_packet_price: null | number;
      }
  )[];
};

/**
 * A billing profile
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "per_site_pricing_billing_profile".
 */
export type PerSitePricingBillingProfile = {
  id: PerSitePricingBillingProfileIdentity;
  type: PerSitePricingBillingProfileType;
  first_name: string;
  last_name: string;
  company: null | string;
  card_last_4: string;
  next_billing_at: string;
  card_type: string;
  card_expiry_month: number;
  card_expiry_year: number;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number: null | string;
  defaulting: boolean;
  credits: number;
  cf_cod_fiscale: null | string;
  coupons: string[];
  is_active: boolean;
  next_monthly_billing_at: null | string;
  next_yearly_billing_at: null | string;
  active_subscriptions: SiteSubscriptionData[];
};
export type PerSitePricingBillingProfileSelfTargetSchema =
  PerSitePricingBillingProfile;
export type PerSitePricingBillingProfileUpdateCreditCardTargetSchema =
  PerSitePricingBillingProfile;
export type PerSitePricingBillingProfileUpdateInfoTargetSchema =
  PerSitePricingBillingProfile;
export type PerSitePricingBillingProfileDestroyTargetSchema =
  PerSitePricingBillingProfile;
/**
 * JSON API attributes
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PerSitePricingBillingProfileAttributes = {
  first_name: string;
  last_name: string;
  company: null | string;
  card_last_4: string;
  next_billing_at: string;
  card_type: string;
  card_expiry_month: number;
  card_expiry_year: number;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number: null | string;
  defaulting: boolean;
  credits: number;
  cf_cod_fiscale: null | string;
  coupons: string[];
  is_active: boolean;
  next_monthly_billing_at: null | string;
  next_yearly_billing_at: null | string;
};

/**
 * JSON API links
 *
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type PerSitePricingBillingProfileRelationships = {
  active_subscriptions: SiteSubscriptionData[];
};

/**
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `update_credit_card.schema` link.
 */
export type PerSitePricingBillingProfileUpdateCreditCardSchema = {
  /**
   * JSON API type field
   */
  type?: 'card';
  payment_intent_id: string;
};

/**
 * This interface was referenced by `PerSitePricingBillingProfile`'s JSON-Schema
 * via the `update_info.schema` link.
 */
export type PerSitePricingBillingProfileUpdateInfoSchema = {
  id?: PerSitePricingBillingProfileIdentity;
  type?: PerSitePricingBillingProfileType;
  first_name: string;
  last_name: string;
  company: null | string;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number?: null | string;
  cf_cod_fiscale?: null | string;
};

/**
 * A billing profile
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "per_owner_pricing_billing_profile".
 */
export type PerOwnerPricingBillingProfile = {
  id: PerOwnerPricingBillingProfileIdentity;
  type: PerOwnerPricingBillingProfileType;
  first_name: string;
  last_name: string;
  company: null | string;
  card_last_4: string;
  next_billing_at: string;
  card_type: string;
  card_expiry_month: number;
  card_expiry_year: number;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number: null | string;
  defaulting: boolean;
  credits: number;
  total_dues: number;
  cf_cod_fiscale: null | string;
  po_number: null | string;
  unbilled_charges: number;
  discount_percentage: number;
};
export type PerOwnerPricingBillingProfileSelfTargetSchema =
  PerOwnerPricingBillingProfile;
export type PerOwnerPricingBillingProfileUpdateCreditCardTargetSchema =
  PerOwnerPricingBillingProfile;
export type PerOwnerPricingBillingProfileUpdateInfoTargetSchema =
  PerOwnerPricingBillingProfile;
/**
 * JSON API attributes
 *
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PerOwnerPricingBillingProfileAttributes = {
  first_name: string;
  last_name: string;
  company: null | string;
  card_last_4: string;
  next_billing_at: string;
  card_type: string;
  card_expiry_month: number;
  card_expiry_year: number;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number: null | string;
  defaulting: boolean;
  credits: number;
  total_dues: number;
  cf_cod_fiscale: null | string;
  po_number: null | string;
  unbilled_charges: number;
  discount_percentage: number;
};

/**
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `update_credit_card.schema` link.
 */
export type PerOwnerPricingBillingProfileUpdateCreditCardSchema = {
  /**
   * JSON API type field
   */
  type?: 'card';
  payment_intent_id: string;
};

/**
 * This interface was referenced by `PerOwnerPricingBillingProfile`'s JSON-Schema
 * via the `update_info.schema` link.
 */
export type PerOwnerPricingBillingProfileUpdateInfoSchema = {
  id?: PerOwnerPricingBillingProfileIdentity;
  type?: PerOwnerPricingBillingProfileType;
  first_name: string;
  last_name: string;
  company: null | string;
  address_line: string;
  city: string;
  email: string;
  country: string;
  state: string;
  zip: string;
  vat_number?: null | string;
  cf_cod_fiscale?: null | string;
  po_number?: null | string;
};

/**
 * An invoice
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "invoice".
 */
export type Invoice = {
  id: InvoiceIdentity;
  type: InvoiceType;
  date: string;
  total: number;
  status: string;
  last_failed_transaction: null | {
    code?: string;
    message?: string;
    [k: string]: unknown;
  };
  billing_profile:
    | PerSitePricingBillingProfileData
    | PerOwnerPricingBillingProfileData;
};

/**
 * JSON API data
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "data".
 */
export type InvoiceData = {
  type: InvoiceType;
  id: InvoiceIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type InvoiceAttributes = {
  date: string;
  total: number;
  status: string;
  last_failed_transaction: null | {
    code?: string;
    message?: string;
    [k: string]: unknown;
  };
};

/**
 * JSON API links
 *
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type InvoiceRelationships = {
  billing_profile:
    | PerSitePricingBillingProfileData
    | PerOwnerPricingBillingProfileData;
};

/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_owner_pricing_billing_profile_collect_unpaid.schema` link.
 */
export type InvoicePerOwnerPricingBillingProfileCollectUnpaidSchema = {
  /**
   * JSON API type field
   */
  type?: 'invoice_collection';
  payment_intent_id: string;
};

/**
 * This interface was referenced by `Invoice`'s JSON-Schema
 * via the `per_site_pricing_billing_profile_collect_unpaid.schema` link.
 */
export type InvoicePerSitePricingBillingProfileCollectUnpaidSchema = {
  /**
   * JSON API type field
   */
  type?: 'invoice_collection';
  payment_intent_id: string;
};

/**
 * A resource usage
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "resource_usage".
 */
export type ResourceUsage = {
  id: ResourceUsageIdentity;
  type: ResourceUsageType;
  quota: string;
  current_usage: null | number;
  free_of_charge_usage: number;
  current_extra_usage: null | number;
  sites_current_usage:
    | null
    | {
        site_id: string;
        site_name: string;
        current_usage: number;
      }[];
};

/**
 * JSON API data
 *
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `definition` "data".
 */
export type ResourceUsageData = {
  type: ResourceUsageType;
  id: ResourceUsageIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `ResourceUsage`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type ResourceUsageAttributes = {
  quota: string;
  current_usage: null | number;
  free_of_charge_usage: number;
  current_extra_usage: null | number;
  sites_current_usage:
    | null
    | {
        site_id: string;
        site_name: string;
        current_usage: number;
      }[];
};

/**
 * Some API endpoint give results asynchronously, returning the ID of a job.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "job_result".
 */
export type JobResult = {
  id: JobResultIdentity;
  type: JobResultType;
  /**
   * Status of delayed HTTP response
   */
  status: number;
  /**
   * JSON API response of the HTTP request
   */
  payload: null | {
    [k: string]: unknown;
  };
};
export type JobResultSelfTargetSchema = JobResult;
/**
 * JSON API data
 *
 * This interface was referenced by `JobResult`'s JSON-Schema
 * via the `definition` "data".
 */
export type JobResultData = {
  type: JobResultType;
  id: JobResultIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `JobResult`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type JobResultAttributes = {
  /**
   * Status of delayed HTTP response
   */
  status: number;
  /**
   * JSON API response of the HTTP request
   */
  payload: null | {
    [k: string]: unknown;
  };
};

/**
 * A request to transfer a site to another account
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "site_transfer".
 */
export type SiteTransfer = {
  id: SiteTransferIdentity;
  type: SiteTransferType;
  source:
    | {
        /**
         * Type of owner
         */
        type: 'account';
        /**
         * Email of the account that owns the project
         */
        email: string;
      }
    | {
        /**
         * Type of owner
         */
        type: 'organization';
        /**
         * Name of the organization that owns the project
         */
        name: string;
        /**
         * ID of the organization that owns the project
         */
        id: string;
      };
  destination:
    | {
        /**
         * Type of owner
         */
        type: 'account';
        /**
         * Email of the account that owns the project
         */
        email: string;
      }
    | {
        /**
         * Type of owner
         */
        type: 'organization';
        /**
         * Name of the organization that owns the project
         */
        name: string;
        /**
         * ID of the organization that owns the project
         */
        id: string;
      };
  /**
   * Name of the site to transfer
   */
  site_name: string;
  recurrence?: ('yearly' | 'monthly') | null;
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  } | null;
  plan: SitePlanData | null;
  meta: SiteTransferMeta;
};
export type SiteTransferSelfTargetSchema = SiteTransfer;
/**
 * JSON API meta
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "meta".
 */
export type SiteTransferMeta = {
  /**
   * Date of site transfer creation
   */
  created_at: string;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SiteTransferAttributes = {
  source:
    | {
        /**
         * Type of owner
         */
        type: 'account';
        /**
         * Email of the account that owns the project
         */
        email: string;
      }
    | {
        /**
         * Type of owner
         */
        type: 'organization';
        /**
         * Name of the organization that owns the project
         */
        name: string;
        /**
         * ID of the organization that owns the project
         */
        id: string;
      };
  destination:
    | {
        /**
         * Type of owner
         */
        type: 'account';
        /**
         * Email of the account that owns the project
         */
        email: string;
      }
    | {
        /**
         * Type of owner
         */
        type: 'organization';
        /**
         * Name of the organization that owns the project
         */
        name: string;
        /**
         * ID of the organization that owns the project
         */
        id: string;
      };
  /**
   * Name of the site to transfer
   */
  site_name: string;
  recurrence?: ('yearly' | 'monthly') | null;
  extra_packets: {
    users?: number;
    locales?: number;
    item_types?: number;
    roles?: number;
    build_triggers?: number;
    access_tokens?: number;
    mux_encoding_seconds?: number;
    sandbox_environments?: number;
    items?: number;
    uploadable_bytes?: number;
  } | null;
};

/**
 * JSON API links
 *
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type SiteTransferRelationships = {
  plan: SitePlanData | null;
};

/**
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `create.schema` link.
 */
export type SiteTransferCreateSchema = {
  type?: SiteTransferType;
  destination?: AccountData | OrganizationData;
};

/**
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `simulate_accept.schema` link.
 */
export type SiteTransferSimulateAcceptSchema = {
  id?: SiteTransferIdentity;
  type?: SiteTransferType;
  billing_profile: PerSitePricingBillingProfileData | null;
};

/**
 * This interface was referenced by `SiteTransfer`'s JSON-Schema
 * via the `accept.schema` link.
 */
export type SiteTransferAcceptSchema = {
  id?: SiteTransferIdentity;
  type?: SiteTransferType;
  payment_intent_id?: string;
  billing_profile?: PerSitePricingBillingProfileData | null;
};

/**
 * Site invitation
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "site_invitation".
 */
export type SiteInvitation = {
  id: SiteInvitationIdentity;
  type: SiteInvitationType;
};

/**
 * JSON API data
 *
 * This interface was referenced by `SiteInvitation`'s JSON-Schema
 * via the `definition` "data".
 */
export type SiteInvitationData = {
  type: SiteInvitationType;
  id: SiteInvitationIdentity;
};

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "subscription_limit".
 */
export type SubscriptionLimit = {
  id: SubscriptionLimitIdentity;
  type: SubscriptionLimitType;
  /**
   * The codename for the limit
   */
  code: string;
  /**
   * Current usage
   */
  usage: number;
  /**
   * The actual limit
   */
  limit: number | null;
};

/**
 * JSON API data
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `definition` "data".
 */
export type SubscriptionLimitData = {
  type: SubscriptionLimitType;
  id: SubscriptionLimitIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `SubscriptionLimit`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SubscriptionLimitAttributes = {
  /**
   * The codename for the limit
   */
  code: string;
  /**
   * Current usage
   */
  usage: number;
  /**
   * The actual limit
   */
  limit: number | null;
};

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "subscription_feature".
 */
export type SubscriptionFeature = {
  id: SubscriptionFeatureIdentity;
  type: SubscriptionFeatureType;
  /**
   * The codename for the feature
   */
  code: string;
  /**
   * Whether the project is currently using the feature
   */
  in_use?: boolean;
  /**
   * Whether the feature is available on the current project
   */
  enabled: boolean;
};

/**
 * JSON API data
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `definition` "data".
 */
export type SubscriptionFeatureData = {
  type: SubscriptionFeatureType;
  id: SubscriptionFeatureIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `SubscriptionFeature`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type SubscriptionFeatureAttributes = {
  /**
   * The codename for the feature
   */
  code: string;
  /**
   * Whether the project is currently using the feature
   */
  in_use?: boolean;
  /**
   * Whether the feature is available on the current project
   */
  enabled: boolean;
};

/**
 * An OAuth application that allows access to our API from third party services.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "oauth_application".
 */
export type OauthApplication = {
  id: OauthApplicationIdentity;
  type: OauthApplicationType;
  /**
   * Name of application
   */
  name: string;
  /**
   * Date of token creation
   */
  created_at: string;
};

/**
 * JSON API data
 *
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `definition` "data".
 */
export type OauthApplicationData = {
  type: OauthApplicationType;
  id: OauthApplicationIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `OauthApplication`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type OauthApplicationAttributes = {
  /**
   * Name of application
   */
  name: string;
  /**
   * Date of token creation
   */
  created_at: string;
};

/**
 * Private entity to handle payments with Stripe
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "payment_intent".
 */
export type PaymentIntent = {
  id: PaymentIntentIdentity;
  type: PaymentIntentType;
  /**
   * Stripe PaymentIntent client_secret
   */
  client_secret: string | null;
  /**
   * Stripe PaymentIntent status
   */
  status: string;
};
export type PaymentIntentCreateFromPaymentMethodTargetSchema = PaymentIntent;
export type PaymentIntentCreateForPerSitePricingBillingProfileTargetSchema =
  PaymentIntent;
export type PaymentIntentCreateForPerOwnerPricingBillingProfileTargetSchema =
  PaymentIntent;
export type PaymentIntentConfirmTargetSchema = PaymentIntent;
/**
 * JSON API data
 *
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `definition` "data".
 */
export type PaymentIntentData = {
  type: PaymentIntentType;
  id: PaymentIntentIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PaymentIntentAttributes = {
  /**
   * Stripe PaymentIntent client_secret
   */
  client_secret: string | null;
  /**
   * Stripe PaymentIntent status
   */
  status: string;
};

/**
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `create_from_payment_method.schema` link.
 */
export type PaymentIntentCreateFromPaymentMethodSchema = {
  /**
   * JSON API type field
   */
  type?: 'payment_intent';
  /**
   * Amount to charge
   */
  amount: number;
};

/**
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `create_for_per_site_pricing_billing_profile.schema` link.
 */
export type PaymentIntentCreateForPerSitePricingBillingProfileSchema = {
  /**
   * JSON API type field
   */
  type?: 'payment_intent';
  /**
   * Amount to charge
   */
  amount: number;
};

/**
 * This interface was referenced by `PaymentIntent`'s JSON-Schema
 * via the `create_for_per_owner_pricing_billing_profile.schema` link.
 */
export type PaymentIntentCreateForPerOwnerPricingBillingProfileSchema = {
  /**
   * JSON API type field
   */
  type?: 'payment_intent';
  /**
   * Amount to charge
   */
  amount: number;
};

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "payment_method".
 */
export type PaymentMethod = {
  id: PaymentMethodIdentity;
  type: PaymentMethodType;
};

/**
 * JSON API data
 *
 * This interface was referenced by `PaymentMethod`'s JSON-Schema
 * via the `definition` "data".
 */
export type PaymentMethodData = {
  type: PaymentMethodType;
  id: PaymentMethodIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `PaymentMethod`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type PaymentMethodAttributes = {};

/**
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "otp_backup_codes".
 */
export type OtpBackupCodes = {
  id: OtpBackupCodesIdentity;
  type: OtpBackupCodesType;
  codes: string[];
};

/**
 * JSON API data
 *
 * This interface was referenced by `OtpBackupCodes`'s JSON-Schema
 * via the `definition` "data".
 */
export type OtpBackupCodesData = {
  type: OtpBackupCodesType;
  id: OtpBackupCodesIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `OtpBackupCodes`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type OtpBackupCodesAttributes = {
  codes: string[];
};

/**
 * Organization role
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "organization_role".
 */
export type OrganizationRole = {
  id: OrganizationRoleIdentity;
  type: OrganizationRoleType;
  /**
   * Name of role
   */
  name: string;
  /**
   * Whether the role can read everything or not
   */
  can_read_everything: boolean;
  /**
   * Whether the role can access projects as owner or not
   */
  can_access_sites_as_owner: boolean;
  /**
   * Whether the role can create new sites or not
   */
  can_create_new_sites: boolean;
  /**
   * Whether the role can edit projects or not
   */
  can_edit_sites: boolean;
  /**
   * Whether the role can manage project transfers or not
   */
  can_manage_site_transfers: boolean;
  /**
   * Whether the role can delete projects or not
   */
  can_delete_sites: boolean;
  /**
   * Whether the role can manage members or not
   */
  can_manage_members: boolean;
  /**
   * Whether the role can manage billing or not
   */
  can_manage_billing: boolean;
  /**
   * Whether the role can manage organization or not
   */
  can_manage_organization: boolean;
};
export type OrganizationRoleSelfTargetSchema = OrganizationRole;
/**
 * JSON API data
 *
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `definition` "data".
 */
export type OrganizationRoleData = {
  type: OrganizationRoleType;
  id: OrganizationRoleIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `OrganizationRole`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type OrganizationRoleAttributes = {
  /**
   * Name of role
   */
  name: string;
  /**
   * Whether the role can read everything or not
   */
  can_read_everything: boolean;
  /**
   * Whether the role can access projects as owner or not
   */
  can_access_sites_as_owner: boolean;
  /**
   * Whether the role can create new sites or not
   */
  can_create_new_sites: boolean;
  /**
   * Whether the role can edit projects or not
   */
  can_edit_sites: boolean;
  /**
   * Whether the role can manage project transfers or not
   */
  can_manage_site_transfers: boolean;
  /**
   * Whether the role can delete projects or not
   */
  can_delete_sites: boolean;
  /**
   * Whether the role can manage members or not
   */
  can_manage_members: boolean;
  /**
   * Whether the role can manage billing or not
   */
  can_manage_billing: boolean;
  /**
   * Whether the role can manage organization or not
   */
  can_manage_organization: boolean;
};

/**
 * A DatoCMS organization can be accessed by multiple people. Every invitation is linked to a specific role, which describes what actions it will be able to perform once the user will register.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "organization_invitation".
 */
export type OrganizationInvitation = {
  id: OrganizationInvitationIdentity;
  type: OrganizationInvitationType;
  /**
   * Email
   */
  email: string;
  role: OrganizationRoleData;
  meta: OrganizationInvitationMeta;
};
export type OrganizationInvitationCreateTargetSchema = OrganizationInvitation;
export type OrganizationInvitationUpdateTargetSchema = OrganizationInvitation;
export type OrganizationInvitationSelfTargetSchema = OrganizationInvitation;
export type OrganizationInvitationDestroyTargetSchema = OrganizationInvitation;
/**
 * JSON API meta
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "meta".
 */
export type OrganizationInvitationMeta = {
  /**
   * Whether the invitation has expired or not
   */
  expired: boolean;
};

/**
 * JSON API data
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "data".
 */
export type OrganizationInvitationData = {
  type: OrganizationInvitationType;
  id: OrganizationInvitationIdentity;
};

/**
 * JSON API attributes
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "attributes".
 */
export type OrganizationInvitationAttributes = {
  /**
   * Email
   */
  email: string;
};

/**
 * JSON API links
 *
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type OrganizationInvitationRelationships = {
  role: OrganizationRoleData;
};

/**
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `create.schema` link.
 */
export type OrganizationInvitationCreateSchema = {
  type?: OrganizationInvitationType;
  /**
   * Email
   */
  email: string;
  role: OrganizationRoleData;
};

/**
 * This interface was referenced by `OrganizationInvitation`'s JSON-Schema
 * via the `update.schema` link.
 */
export type OrganizationInvitationUpdateSchema = {
  id?: OrganizationInvitationIdentity;
  type?: OrganizationInvitationType;
  role?: OrganizationRoleData;
  [k: string]: unknown;
};

/**
 * A DatoCMS organization can be accessed by multiple people. Every membership is linked to a specific role, which describes what actions it will be able to perform once the user will register.
 *
 * This interface was referenced by `DatoApi`'s JSON-Schema
 * via the `definition` "organization_membership".
 */
export type OrganizationMembership = {
  id: OrganizationMembershipIdentity;
  type: OrganizationMembershipType;
  role: OrganizationRoleData;
  meta: OrganizationMembershipMeta;
};
export type OrganizationMembershipUpdateTargetSchema = OrganizationMembership;
export type OrganizationMembershipSelfTargetSchema = OrganizationMembership;
export type OrganizationMembershipMeTargetSchema = OrganizationMembership;
export type OrganizationMembershipDestroyTargetSchema = OrganizationMembership;
/**
 * JSON API meta
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "meta".
 */
export type OrganizationMembershipMeta = {
  /**
   * Email
   */
  email: string;
  /**
   * First name
   */
  first_name?: string | null;
  /**
   * Last name
   */
  last_name?: string | null;
};

/**
 * JSON API data
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "data".
 */
export type OrganizationMembershipData = {
  type: OrganizationMembershipType;
  id: OrganizationMembershipIdentity;
};

/**
 * JSON API links
 *
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `definition` "relationships".
 */
export type OrganizationMembershipRelationships = {
  role: OrganizationRoleData;
};

/**
 * This interface was referenced by `OrganizationMembership`'s JSON-Schema
 * via the `update.schema` link.
 */
export type OrganizationMembershipUpdateSchema = {
  id?: OrganizationMembershipIdentity;
  type?: OrganizationMembershipType;
  role?: OrganizationRoleData;
  [k: string]: unknown;
};
