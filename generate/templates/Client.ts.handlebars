import * as Resources from './resources';
import { request, pollJobResult, LogLevel } from '@datocms/rest-client-utils';
import { JobResult } from './SimpleSchemaTypes';

export type RequestOptions = {
  method: 'GET' | 'PUT' | 'POST' | 'DELETE';
  url: string;
  queryParams?: Record<string, unknown>;
  body?: unknown;
  preCallStack?: string;
};

export type ClientConfigOptions = {
  /** The API token to use to perform requests */
  apiToken: string | null;
  /** The base URL of the server. Defaults to {{{baseUrl}}} */
  baseUrl?: string;
  {{#if isCma}}
  /** The environment in which to perform every API request */
  environment?: string;
  {{else}}
  /** The organization ID in which to perform every API request */
  organization?: string;
  {{/if}}
  /** Configure request timeout (in ms). When timeout is reached and `autoRetry` is active, a new request will be performed. Otherwise, a `TimeoutError` will be raised. Defaults to `30000` */
  requestTimeout?: number;
  /** Any extra header to add to every API request */
  extraHeaders?: Record<string, string>;
  /** Level of logging */
  logLevel?: LogLevel;
  /** Function to use to log. Defaults to `console.log` */
  logFn?: (message: string) => void;
  /** Whether to automatically retry failed requests (ie. timeout, rate-limiting, etc.), with a linear incremental backoff. Defaults to `true` */
  autoRetry?: boolean;
};

export class Client {
  static readonly defaultBaseUrl = '{{{baseUrl}}}';

  {{#each resources}}
    {{{namespace}}}: Resources.{{{resourceClassName}}};
  {{/each}}

  config: ClientConfigOptions;
  jobResultsFetcher?: (jobId: string) => Promise<JobResult>;

  private cachedEventsChannelName: string | undefined;

  constructor(config: ClientConfigOptions) {
    this.config = config;
    {{#each resources}}
      this.{{{namespace}}} = new Resources.{{{resourceClassName}}}(this);
    {{/each}}
  }

  get baseUrl() {
    return this.config.baseUrl || Client.defaultBaseUrl;
  }

  request<T>(options: RequestOptions) {
    return request<T>({
      ...this.config,
      ...options,
      logFn: this.config.logFn || console.log,
      userAgent: '@datocms/{{prefix}}-client',
      baseUrl: this.baseUrl,
      preCallStack: new Error().stack,
      {{#if isCma}}
        extraHeaders: {
          ...(this.config.extraHeaders || {}),
          ...(this.config.environment
            ? { 'X-Environment': this.config.environment }
            : {}),
          'X-API-Version': '3',
        },
      {{else}}
        extraHeaders: {
          ...(this.config.extraHeaders || {}),
          ...(this.config.organization
            ? { 'X-Organization': this.config.organization }
            : {}),
        },
      {{/if}}
      fetchJobResult: (jobId: string) => {
        return this.jobResultsFetcher
          ? this.jobResultsFetcher(jobId)
          : pollJobResult(() => this.jobResults.find(jobId));
      },
    });
  }

  async eventsChannelName() {
    if (this.cachedEventsChannelName) {
      return this.cachedEventsChannelName;
    }

    {{#if isCma}}
      const { data: site } = await this.site.rawFind();

      this.cachedEventsChannelName = this.config.environment
          ? `private-site-${site.id}-environment-${this.config.environment}`
          : `private-site-${site.id}`;
    {{else}}
      const { data: account } = await this.account.rawFind();

      this.cachedEventsChannelName = `private-account-${account.id}`;
    {{/if}}

    return this.cachedEventsChannelName;
  }
}